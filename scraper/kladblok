

## Determine dates to work with
CheckDate = startDate
Today = datetime.date( datetime.fromtimestamp( time.time() ))


### Spelen met datum tijd:






while EvalDate <= Today:
    # print( "Eval day is: ", EvalDate, " ---  Today: ", Today)
    activityFound = False

    ## Now check to see if there is an activity on EvalDay
    ## Very dirty loop through all activities instead of searching through the activities
    for activity in ListOfActivities:
        StravaDate = datetime.date( datetime.strptime(activity["start_date_local"], "%Y-%m-%dT%H:%M:%SZ") )
        if EvalDate == StravaDate:
            print( "Strava date: ", StravaDate)
            activityFound = True

    if activityFound:
        print("For Evalday ", EvalDate, " one or more activities were found")

    EvalDate += timedelta(days=1)   ## Add one day to EvalDate





        # print(storedDate["dailyfitness"]["fitnessdate"])
        for activity in ListOfActivities:
        StravaDate = datetime.date( datetime.strptime(activity["start_date_local"], "%Y-%m-%dT%H:%M:%SZ") )
        print("Type activity: ", type(activity))
        #if EvalDate == StravaDate:
        #    print( "Strava date: ", StravaDate)
        #    activityFound = True

    if activityFound:
        print("For Evalday one or more activities were found")









# for activity in ListOfActivities:
#    if activity["device_watts"]:
#        print( activity["id"], 
#            activity["name"],
#            activity["start_date_local"],
#            activity["trainer"],
#            activity["kilojoules"],
#            activity["workout_type"],
#            activity["device_watts"],
#            activity["weighted_average_watts"], 
#            activity["suffer_score"]
#            )
        
 #   else:
 #       print( activity["id"], 
 #           activity["name"],
 #           activity["start_date_local"],
 #           activity["trainer"],
 #           activity["kilojoules"],
 #           activity["workout_type"],
 #           activity["device_watts"]
 #           )





###########
#########

print(ListOfActivities)

## Read the stored activities
try:
    readfile = open("activities.json", "r")
    storedDates = json.load(readfile)
except IOError:
    ## If the file doesn't exist, create json object in 'data'
    ## Since Fitness is calculated from the last 42 day average, only need to go back 42 days
    CheckDate = round(time.time() - (42 * 86400))
    print( "Checkdate :" , datetime.date( datetime.fromtimestamp( CheckDate )))
    print( "Isoformat: ", datetime.date( datetime.fromtimestamp( CheckDate )).isoformat() )

    storedFitness = {
         "dailyfitness" :
        [
            {
                "fitnessdate" : datetime.date( datetime.fromtimestamp( CheckDate )).isoformat(),
                "activityid" : 0,
                "name" : "dummy",
                "HRSS" : 0,
                "PSS" : 0,
                "Final Stress" : 0,
                "fitness" : 0,
                "fatigue" : 0,
                "form" : 0 
            }
       ]
    }

print( type(ListOfActivities))
def search_activity_on_date( name ):
    for keyval in ListOfActivities:
        if name.lower() == keyval['name'].lower():
            return keyval['start_date_local'], keyval['id']


## For every record in dailyfitness check if this date has any recordings in the strava file.
## In strava there can be mulitple recordings for one day
for fitnessday in storedFitness["dailyfitness"]:
    print( fitnessday["fitnessdate"])

    ## Check if Strava has an activity for that day, unfortunately by looping through
    searchfor = "Morning Ride"
    if (search_activity_on_date(searchfor) != None):
        print( "Found: ", search_activity_on_date(searchfor))

    else:
        print( searchfor, " is not found.") 






def search_activity_on_date( name ):
for keyval in ListOfActivities:
    if name.lower() == keyval['name'].lower():
        return keyval['start_date_local'], keyval['id']

## Check if Strava has an activity for that day, unfortunately by looping through
searchfor = "Rustig ritje met Soof"
if (search_activity_on_date(searchfor) != None):
print( "Found: ", search_activity_on_date(searchfor))

else:
print( searchfor, " is not found.") 
